container_name = "${env.CONTAINER_NAME}"
kube_name = "${env.WEB_NAME}-${env.ENVIRONMENT_NAME}".replace(".", "-")
host_name = "${env.HOST_NAME}"

if ("${env.ENVIRONMENT_NAME}" == "dev") {
    docker_image_tag = "${env.ENVIRONMENT_NAME}-${env.BUILD_NUMBER}"
    kubernetes_namespace = 'dev'
    execute_build()
}

if ("${env.ENVIRONMENT_NAME}" == "staging") {
    docker_image_tag = "${env.ENVIRONMENT_NAME}-${ReleaseVersion}-${env.BUILD_NUMBER}"
    kubernetes_namespace = 'staging'
    execute_build()
}

if ("${env.ENVIRONMENT_NAME}" == "production") {
    docker_image_tag = "${ReleaseVersion}"
    kubernetes_namespace = 'production'
    execute_build()
}

def execute_build() {
    pipeline {
        agent {
            label "docker"
        }

        def slack_channel = "#uk-content-builds"
        def slack_team = "bauerxcelmedia"
        def slack_credential_id = "slack-bauerxcelmedia-uk-content-builds"
        def docker_registry_url = "https://841059140795.dkr.ecr.eu-west-1.amazonaws.com/"
        def docker_credentials_id = "ecr:eu-west-1:container.citools.pushpull"
        def git_credentials_id = "82874f36-94f6-4ce9-ba23-7b11c3532e24"
        def kube_slave = "841059140795.dkr.ecr.eu-west-1.amazonaws.com/jenkins-slave-kube:1.0.0"
        def kube_credentials = "752715f9-b784-4fd7-b359-f51ac3462c54"
        def kube_server_url = "https://api.kubernetes-content.bauerxcel.tech"

        stages {

            stage('Start') {
                steps {
                    echo "Starting"
                    slackSend channel: "${slack_channel}", color: 'good', message: "Jenkins job ${env.JOB_NAME} started - ${env.BUILD_URL}", teamDomain: "${slack_team}", tokenCredentialId: "${slack_credential_id}"
                }
            }

            stage('Clone Git Repo') {
                steps {
                    echo 'Cloning git repo'
                    checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[credentialsId: "${git_credentials_id}", url: "${env.GIT_URL}"]], branches: [[name: "${env.BRANCH_NAME}"]]], poll: false
                    sh "git rev-parse HEAD > .git/commit-id"
                    def commit_id = readFile('.git/commit-id').trim()
                    println commit_id
                    VERSION_INFO = "Branch: ${env.BRANCH_NAME} - Commit ID: ${commit_id} - Jenkins job ${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}"
                }
            }

            stage('Build Docker Image') {
                steps{
                    docker.withRegistry("${docker_registry_url}", "${docker_credentials_id}") {
                        echo "Building docker image"
                        sh 'cp /root/.dockercfg $HOME/.dockercfg'
                        docker.build("${container_name}", '.')
                    }
                }
            }

            stage('Publish Docker Image') {
                steps{
                    docker.withRegistry("${docker_registry_url}", "${docker_credentials_id}") {
                        echo "Publishing Docker image"
                        docker.image("${container_name}").push("${docker_image_tag}")
                    }
                }
            }

            stage('Deploy') {
                steps{
                    node('kubectl') {
                        echo "Deploying"

                        checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[credentialsId: "${git_credentials_id}", url: "${env.GIT_URL}"]], branches: [[name: "${env.BRANCH_NAME}"]]], poll: false
                        wrap([$class: 'KubectlBuildWrapper', caCertificate: '', credentialsId: "${kube_credentials}", serverUrl: "${kube_server_url}"]) {
                            sh "cat build/remote/web-deployment-svc-ing-hpa.template.yaml | sed 's/#IMAGE_TAG#/${docker_image_tag}/; s/#IMAGE_NAME#/${container_name}/; s/#KUBE_NAME#/${kube_name}/; s/#MIN_REPLICAS#/${env.MIN_REPLICAS}/; s/#MAX_REPLICAS#/${env.MAX_REPLICAS}/; s/#CONFIG_ENVIRONMENT#/${env.CONFIG_ENVIRONMENT}/; s/#HOST_NAME#/${host_name}/' | kubectl --namespace=${kubernetes_namespace} apply -f - "
                        }
                    }
                }
            }
        }
        post {
            success {
                echo 'Succeeded'
                slackSend channel: "${slack_channel}", color: 'good', message: "Jenkins job ${env.JOB_NAME} successfully completed - ${env.BUILD_URL}", teamDomain: "${slack_team}", tokenCredentialId: "${slack_credential_id}"
            }

            failure {
                echo "Failed"
                slackSend channel: "${slack_channel}", color: 'danger', message: "Jenkins job ${env.JOB_NAME} failed - ${env.BUILD_URL}", teamDomain: "${slack_team}", tokenCredentialId: "${slack_credential_id}"
            }
        }
    }

}