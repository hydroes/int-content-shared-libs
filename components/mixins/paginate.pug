mixin pagination(paginateData)
  -
    let prev = paginateData.page
    let path = ''
    let main = {
      limit : 7,
      current: paginateData.page,
      totalPages: paginateData.totalPages,
      next: paginateData.nextPage,
      path: data.path,
      parsePath (current, path) {
        if (current === 1) {
          return (path || '').replace(/1\/?$/, '')
        } else {
          return path + current
        }
      },
    }

    getNextPagination = current => current + main.limit
    isAtLimit = current => (current + main.limit) >= main.totalPages
    counterOffset = () => main.totalPages - main.limit
    isActive = isThisPage => isThisPage === main.current ? 'pagination__link--active' : 'pagination__link'

  ul.pagination
    - let counter = data.metadata.page
    - let numbers = getNextPagination(main.current)
    if main.current > 1
      li
        a(class="pagination__link" href=main.parsePath(--prev, main.path)) &lt;
    if main.current > 10
      li
        a(class="pagination__link" href=main.parsePath(1, main.path)) 1
    if isAtLimit(main.current)
      - let limitCounter = counterOffset()
      while limitCounter < main.totalPages
        li
          a(class=isActive(limitCounter) href=main.parsePath(limitCounter, main.path)) #{limitCounter++}
    else
      while counter <= numbers
        li
          a(class=isActive(counter) href=main.parsePath(counter, main.path)) #{counter++}
    li 
      a(class=isActive(main.totalPages) href=main.parsePath(main.totalPages, main.path) ) #{main.totalPages}
    if main.current < main.totalPages
      li
        a(class="pagination__link" href=main.parsePath(main.next, main.path)) &gt;
