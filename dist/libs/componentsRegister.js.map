{"version":3,"sources":["libs/componentsRegister.js"],"names":["Fs","require","Path","Components","path","name","join","fileInfo","statSync","isDirectory","folderPath","componentRoot","componentPath","_isFolder","parse","jsFilePath","_getComponentScriptPath","existsSync","dirContents","readdirSync","components","Error","file","component","registerSingle","push","componentsPath","__dirname","registerAll"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;IAEME,U;;;;;;;4CACqBC,I,EAAMC,I,EAAM;AACnC,aAAUH,KAAKI,IAAL,CAAUF,IAAV,EAAgBC,IAAhB,CAAV;AACD;;;8BAEUD,I,EAAM;AACf,UAAMG,WAAWP,GAAGQ,QAAH,CAAYJ,IAAZ,CAAjB;AACA,aAAOG,SAASE,WAAT,EAAP;AACD;;;mCAEeC,U,EAAYC,a,EAAe;AACzC,UAAMC,gBAAgBV,KAAKI,IAAL,CAAUK,aAAV,EAAyBD,UAAzB,CAAtB;AACA,UAAI,CAAC,KAAKG,SAAL,CAAeD,aAAf,CAAL,EAAoC;AAClC;AACD;;AAJwC,wBAKxBV,KAAKY,KAAL,CAAWF,aAAX,CALwB;AAAA,UAKjCP,IALiC,eAKjCA,IALiC;;AAMzC,UAAMU,aAAa,KAAKC,uBAAL,CAA6BJ,aAA7B,EAA4CP,IAA5C,CAAnB;;AAEA,UAAIL,GAAGiB,UAAH,CAAcF,UAAd,CAAJ,EAA+B;AAC7B,eAAO;AACLV,oBADK;AAELD,gBAAMW;AAFD,SAAP;AAID;AACF;;;gCAEYX,I,EAAM;AACjB,UAAMc,cAAclB,GAAGmB,WAAH,CAAef,IAAf,CAApB;AACA,UAAIgB,aAAa,EAAjB;AACA,UAAI,CAAC,KAAKP,SAAL,CAAeT,IAAf,CAAL,EAA2B;AACzB,cAAM,IAAIiB,KAAJ,CAAajB,IAAb,uDAAN;AACD;AALgB;AAAA;AAAA;;AAAA;AAMjB,wDAAmBc,WAAnB,4GAAgC;AAAA,cAArBI,IAAqB;;AAC9B,cAAMC,YAAY,KAAKC,cAAL,CAAoBF,IAApB,EAA0BlB,IAA1B,CAAlB;AACA,cAAImB,SAAJ,EAAe;AACbH,uBAAWK,IAAX,CAAgBF,SAAhB;AACD;AACF;AAXgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYjB,aAAOH,UAAP;AACD;;;;;AAEH,IAAMM,iBAAoBC,SAApB,oBAAN;kBACe,IAAIxB,UAAJ,GAAiByB,WAAjB,CAA6BF,cAA7B,C","file":"componentsRegister.js","sourcesContent":["'use strict'\n\nconst Fs = require('fs')\nconst Path = require('path')\n\nclass Components {\n  _getComponentScriptPath (path, name) {\n    return `${Path.join(path, name)}.js`\n  }\n\n  _isFolder (path) {\n    const fileInfo = Fs.statSync(path)\n    return fileInfo.isDirectory()\n  }\n\n  registerSingle (folderPath, componentRoot) {\n    const componentPath = Path.join(componentRoot, folderPath)\n    if (!this._isFolder(componentPath)) {\n      return\n    }\n    const { name } = Path.parse(componentPath)\n    const jsFilePath = this._getComponentScriptPath(componentPath, name)\n\n    if (Fs.existsSync(jsFilePath)) {\n      return {\n        name,\n        path: jsFilePath\n      }\n    }\n  }\n\n  registerAll (path) {\n    const dirContents = Fs.readdirSync(path)\n    let components = []\n    if (!this._isFolder(path)) {\n      throw new Error(`${path} is not a directory. Components cannot be loaded!`)\n    }\n    for (const file of dirContents) {\n      const component = this.registerSingle(file, path)\n      if (component) {\n        components.push(component)\n      }\n    }\n    return components\n  }\n}\nconst componentsPath = `${__dirname}/../components/`\nexport default new Components().registerAll(componentsPath)\n"]}