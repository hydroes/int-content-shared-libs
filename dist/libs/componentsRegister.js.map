{"version":3,"sources":["libs/componentsRegister.js"],"names":["Fs","require","Path","ComponentRegister","path","_registerAll","name","join","fileInfo","statSync","isDirectory","folderPath","componentRoot","componentPath","_isFolder","parse","jsFilePath","_getComponentScriptPath","existsSync","dirContents","readdirSync","components","Error","file","component","_registerSingle","push","componentsPath","__dirname"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;IAEME,iB;AACJ,6BAAaC,IAAb,EAAmB;AAAA;;AACjB,WAAO,KAAKC,YAAL,CAAkBD,IAAlB,CAAP;AACD;;;;4CAEwBA,I,EAAME,I,EAAM;AACnC,aAAUJ,KAAKK,IAAL,CAAUH,IAAV,EAAgBE,IAAhB,CAAV;AACD;;;8BAEUF,I,EAAM;AACf,UAAMI,WAAWR,GAAGS,QAAH,CAAYL,IAAZ,CAAjB;AACA,aAAOI,SAASE,WAAT,EAAP;AACD;;;oCAEgBC,U,EAAYC,a,EAAe;AAC1C,UAAMC,gBAAgBX,KAAKK,IAAL,CAAUK,aAAV,EAAyBD,UAAzB,CAAtB;AACA,UAAI,CAAC,KAAKG,SAAL,CAAeD,aAAf,CAAL,EAAoC;AAClC;AACD;;AAJyC,wBAKzBX,KAAKa,KAAL,CAAWF,aAAX,CALyB;AAAA,UAKlCP,IALkC,eAKlCA,IALkC;;AAM1C,UAAMU,aAAa,KAAKC,uBAAL,CAA6BJ,aAA7B,EAA4CP,IAA5C,CAAnB;;AAEA,UAAIN,GAAGkB,UAAH,CAAcF,UAAd,CAAJ,EAA+B;AAC7B,eAAO;AACLV,oBADK;AAELF,gBAAMY;AAFD,SAAP;AAID;AACF;;;iCAEaZ,I,EAAM;AAClB,UAAMe,cAAcnB,GAAGoB,WAAH,CAAehB,IAAf,CAApB;AACA,UAAIiB,aAAa,EAAjB;AACA,UAAI,CAAC,KAAKP,SAAL,CAAeV,IAAf,CAAL,EAA2B;AACzB,cAAM,IAAIkB,KAAJ,CAAalB,IAAb,uDAAN;AACD;AALiB;AAAA;AAAA;;AAAA;AAMlB,wDAAmBe,WAAnB,4GAAgC;AAAA,cAArBI,IAAqB;;AAC9B,cAAMC,YAAY,KAAKC,eAAL,CAAqBF,IAArB,EAA2BnB,IAA3B,CAAlB;AACA,cAAIoB,SAAJ,EAAe;AACbH,uBAAWK,IAAX,CAAgBF,SAAhB;AACD;AACF;AAXiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYlB,aAAOH,UAAP;AACD;;;;;AAEH,IAAMM,iBAAoBC,SAApB,oBAAN;kBACe,IAAIzB,iBAAJ,CAAsBwB,cAAtB,C","file":"componentsRegister.js","sourcesContent":["'use strict'\n\nconst Fs = require('fs')\nconst Path = require('path')\n\nclass ComponentRegister {\n  constructor (path) {\n    return this._registerAll(path)\n  }\n\n  _getComponentScriptPath (path, name) {\n    return `${Path.join(path, name)}.js`\n  }\n\n  _isFolder (path) {\n    const fileInfo = Fs.statSync(path)\n    return fileInfo.isDirectory()\n  }\n\n  _registerSingle (folderPath, componentRoot) {\n    const componentPath = Path.join(componentRoot, folderPath)\n    if (!this._isFolder(componentPath)) {\n      return\n    }\n    const { name } = Path.parse(componentPath)\n    const jsFilePath = this._getComponentScriptPath(componentPath, name)\n\n    if (Fs.existsSync(jsFilePath)) {\n      return {\n        name,\n        path: jsFilePath\n      }\n    }\n  }\n\n  _registerAll (path) {\n    const dirContents = Fs.readdirSync(path)\n    let components = []\n    if (!this._isFolder(path)) {\n      throw new Error(`${path} is not a directory. Components cannot be loaded!`)\n    }\n    for (const file of dirContents) {\n      const component = this._registerSingle(file, path)\n      if (component) {\n        components.push(component)\n      }\n    }\n    return components\n  }\n}\nconst componentsPath = `${__dirname}/../components/`\nexport default new ComponentRegister(componentsPath)\n"]}