{"version":3,"sources":["libs/assets.js"],"names":["path","require","fs","DIST_DIR","module","exports","assetType","assets","componentPath","normalize","__dirname","push","addAssetsInFoldersRecursive","existsSync","readdirSync","forEach","file","index","curPath","lstatSync","isDirectory","variablesFilePath"],"mappings":"AAAA;;AAEA;;AAEA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA;AACA,IAAME,WAAW,cAAjB;AACA;AACA;AACAC,OAAOC,OAAP,GAAiB,UAAUC,SAAV,EAAqB;AACpC;AACA,MAAIC,SAAS,EAAb;AACA,MAAMC,gBAAgBR,KAAKS,SAAL,CAAeC,YAAY,UAAZ,GAAyBP,QAAxC,CAAtB,CAHoC,CAGoC;;AAExE,UAAQG,SAAR;AACE,SAAK,SAAL;AACE;AACAC,aAAOI,IAAP,CAAYH,gBAAgB,gBAA5B;AACA;AACF,SAAK,QAAL;AACE,UAAII,8BAA8B,SAA9BA,2BAA8B,CAAUZ,IAAV,EAAgB;AAChD,YAAIE,GAAGW,UAAH,CAAcb,IAAd,CAAJ,EAAyB;AACvBE,aAAGY,WAAH,CAAed,IAAf,EAAqBe,OAArB,CAA6B,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAClD,gBAAIC,UAAUlB,OAAO,GAAP,GAAagB,IAA3B;AACA,gBAAId,GAAGiB,SAAH,CAAaD,OAAb,EAAsBE,WAAtB,EAAJ,EAAyC;AAAE;AACzCR,0CAA4BM,OAA5B;AACD,aAFD,MAEO;AAAE;AACPX,qBAAOI,IAAP,CAAYO,OAAZ;AACD;AACF,WAPD;AAQD;AACF,OAXD;AAYAN,kCAA4B,kBAA5B;AACA;AACF,SAAK,qBAAL;AACE,UAAIS,oBAAoBrB,KAAKS,SAAL,CAAeC,YAAY,mEAA3B,CAAxB,CADF,CAC0H;AACxHH,aAAOI,IAAP,CAAYU,iBAAZ;AACA;AACF,SAAK,QAAL;AACEd,aAAOI,IAAP,CAAYH,gBAAgB,gBAA5B;AACA;AACF;AACE;AA5BJ;;AA+BA,SAAOD,MAAP;AACD,CArCD","file":"assets.js","sourcesContent":["'use strict'\n\n// Used to esxprt file paths for front end assets such as js and css\n\nconst path = require('path')\nconst fs = require('fs')\n// @todo: make DIST_DIR come from a config var\nconst DIST_DIR = 'public/dist/'\n// returns paths of css/js assets\n// @param assetType css|scripts9\nmodule.exports = function (assetType) {\n  // script paths stored here\n  let assets = []\n  const componentPath = path.normalize(__dirname + './../../' + DIST_DIR) // eslint-disable-line\n\n  switch (assetType) {\n    case 'scripts':\n      // get minified script path\n      assets.push(componentPath + '/script.min.js')\n      break\n    case 'assets':\n      var addAssetsInFoldersRecursive = function (path) {\n        if (fs.existsSync(path)) {\n          fs.readdirSync(path).forEach(function (file, index) {\n            var curPath = path + '/' + file\n            if (fs.lstatSync(curPath).isDirectory()) { // recurse\n              addAssetsInFoldersRecursive(curPath)\n            } else { // add file\n              assets.push(curPath)\n            }\n          })\n        }\n      }\n      addAssetsInFoldersRecursive('./public/assets/')\n      break\n    case 'bootstrap_variables':\n      let variablesFilePath = path.normalize(__dirname + './../../src/components/shared/sass/bauer-bootstrap/variables.scss') // eslint-disable-line\n      assets.push(variablesFilePath)\n      break\n    case 'styles':\n      assets.push(componentPath + '/style.min.css')\n      break\n    default:\n      break\n  }\n\n  return assets\n}\n"]}